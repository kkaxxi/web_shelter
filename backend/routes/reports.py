from flask import render_template, request, redirect, url_for, flash, abort, current_app, send_file
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
import os

from forms import MonthlyReportForm
from models import db, MonthlyReport, Donation
from datetime import datetime
from . import reports_bp

from flask_wtf import FlaskForm
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics

# üìù Dummy form for CSRF –≤ —à–∞–±–ª–æ–Ω—ñ
class DummyForm(FlaskForm):
    pass

# üìã –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∑–≤—ñ—Ç—ñ–≤
@reports_bp.route('/reports')
def reports_page():
    reports = MonthlyReport.query.order_by(MonthlyReport.year.desc(), MonthlyReport.month_number).all()
    years = sorted(set(r.year for r in reports), reverse=True)
    dummy_form = DummyForm()
    return render_template('reports.html', reports=reports, years=years, form=dummy_form)

# ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
@reports_bp.route('/reports/add', methods=['GET', 'POST'])
@login_required
def add_report():
    if current_user.role != 'admin':
        abort(403)

    form = MonthlyReportForm()

    # üí∏ –ê–≤—Ç–æ–ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å
    donation_sum = db.session.query(db.func.sum(Donation.amount))\
        .filter(db.extract('year', Donation.timestamp) == form.year.data)\
        .filter(db.extract('month', Donation.timestamp) == form.month_number.data)\
        .scalar() or 0
    form.income.data = donation_sum

    if form.validate_on_submit():
        month_translit = {
            "–°—ñ—á–µ–Ω—å": "sichen",
            "–õ—é—Ç–∏–π": "liutyi",
            "–ë–µ—Ä–µ–∑–µ–Ω—å": "berezen",
            "–ö–≤—ñ—Ç–µ–Ω—å": "kviten",
            "–¢—Ä–∞–≤–µ–Ω—å": "traven",
            "–ß–µ—Ä–≤–µ–Ω—å": "cherven",
            "–õ–∏–ø–µ–Ω—å": "lypen",
            "–°–µ—Ä–ø–µ–Ω—å": "serpen",
            "–í–µ—Ä–µ—Å–µ–Ω—å": "veresen",
            "–ñ–æ–≤—Ç–µ–Ω—å": "zhovten",
            "–õ–∏—Å—Ç–æ–ø–∞–¥": "lystopad",
            "–ì—Ä—É–¥–µ–Ω—å": "hruden"
        }

        filename = f"{month_translit.get(form.month.data, 'misyats')}_{form.year.data}.pdf"
        pdf_url = f'/static/reports/{filename}'

        # ‚ùó –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç
        total_sub_expenses = sum([
            form.operating_costs.data or 0,
            form.vet_services.data or 0,
            form.garbage.data or 0,
            form.salary.data or 0,
            form.dry_food.data or 0,
            form.cat_litter.data or 0,
            form.grains.data or 0,
            form.construction.data or 0
        ])
        if form.expenses.data != total_sub_expenses:
            flash("‚ùå –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—É–º—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö!")
            return render_template('add_report.html', form=form)

        # üì• –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        report = MonthlyReport(
            year=form.year.data,
            month=form.month.data,
            month_number=form.month_number.data,
            income=form.income.data,
            expenses=form.expenses.data,
            operating_costs=form.operating_costs.data,
            vet_services=form.vet_services.data,
            garbage=form.garbage.data,
            salary=form.salary.data,
            dry_food=form.dry_food.data,
            cat_litter=form.cat_litter.data,
            grains=form.grains.data,
            construction=form.construction.data,
            adopted_animals=form.adopted_animals.data,
            new_animals=form.new_animals.data,
            pdf_url=pdf_url
        )
        db.session.add(report)
        db.session.commit()

        # üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF
        generate_report_pdf(report, current_app)

        flash("‚úÖ –ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ PDF –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
        return redirect(url_for('reports.reports_page'))

    return render_template('add_report.html', form=form)

# üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF-—Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–≤—ñ—Ç—É
def generate_report_pdf(report, app):
    filename = os.path.basename(report.pdf_url)
    filepath = os.path.join(app.config['REPORTS_FOLDER'], filename)

    # üñãÔ∏è –®—Ä–∏—Ñ—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
    font_path = os.path.join(app.root_path, 'static', 'fonts', 'DejaVuSans.ttf')
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))

    c = canvas.Canvas(filepath)
    c.setFont("DejaVuSans", 14)
    y = 820
    line_height = 22

    c.drawString(100, y, f"–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç –∑–∞ {report.month} {report.year}")
    c.setFont("DejaVuSans", 12)
    y -= line_height
    c.drawString(100, y, f"–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: {report.income} –≥—Ä–Ω")
    y -= line_height
    c.drawString(100, y, f"–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {report.expenses} –≥—Ä–Ω")

    y -= line_height * 2
    c.drawString(100, y, "–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç:")
    y -= line_height

    sub_expenses = {
        "–§—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏—Ç—É–ª–∫—É": report.operating_costs,
        "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ñ –ø–æ—Å–ª—É–≥–∏": report.vet_services,
        "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è": report.garbage,
        "–ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞": report.salary,
        "–°—É—Ö–∏–π –∫–æ—Ä–º": report.dry_food,
        "–ö–æ—Ç—è—á–∏–π –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á": report.cat_litter,
        "–ö—Ä—É–ø–∏": report.grains,
        "–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏": report.construction
    }

    for label, value in sub_expenses.items():
        c.drawString(120, y, f"{label}: {value} –≥—Ä–Ω")
        y -= line_height

    y -= line_height
    c.drawString(100, y, f"üêæ –£—Å–∏–Ω–æ–≤–ª–µ–Ω–æ —Ç–≤–∞—Ä–∏–Ω: {report.adopted_animals}")
    y -= line_height
    c.drawString(100, y, f"üê∂ –ù–æ–≤–∏—Ö —Ç–≤–∞—Ä–∏–Ω: {report.new_animals}")
    c.save()

# üìÇ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è PDF –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
@reports_bp.route('/reports/pdf/<filename>')
def serve_pdf(filename):
    pdf_path = os.path.join(current_app.config['REPORTS_FOLDER'], filename)
    if not os.path.exists(pdf_path):
        abort(404)
    return send_file(pdf_path, mimetype='application/pdf')

# ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
@reports_bp.route('/reports/delete/<int:report_id>', methods=['POST'])
@login_required
def delete_report(report_id):
    if current_user.role != 'admin':
        abort(403)

    report = MonthlyReport.query.get_or_404(report_id)

    # üóëÔ∏è –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ PDF-—Ñ–∞–π–ª
    if report.pdf_url:
        try:
            filename = os.path.basename(report.pdf_url)
            pdf_path = os.path.join(current_app.config['REPORTS_FOLDER'], filename)
            if os.path.exists(pdf_path):
                os.remove(pdf_path)
            else:
                flash(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {filename}")
        except Exception as e:
            flash(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ PDF: {str(e)}")

    db.session.delete(report)
    db.session.commit()
    flash("‚úÖ –ó–≤—ñ—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!")
    return redirect(url_for('reports.reports_page'))
