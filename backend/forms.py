from flask_wtf import FlaskForm 
from flask_wtf.file import FileField, FileAllowed, FileRequired
from wtforms import (
    StringField, PasswordField, SubmitField, IntegerField,
    TextAreaField, SelectField, BooleanField, FileField,
    DateField, TimeField, SubmitField

)
from wtforms.validators import DataRequired, Email, NumberRange, Optional
from datetime import datetime, timedelta

class RegisterForm(FlaskForm):
    username = StringField('–Ü–º‚Äô—è', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–£–≤—ñ–π—Ç–∏')

class DonationForm(FlaskForm):
    amount = IntegerField('–°—É–º–∞', validators=[DataRequired(), NumberRange(min=1)])
    is_monthly = BooleanField('–©–æ–º—ñ—Å—è—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
    submit = SubmitField('–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏')

class FeedbackForm(FlaskForm):
    name = StringField('–Ü–º‚Äô—è', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    message = TextAreaField('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', validators=[DataRequired()])
    submit = SubmitField('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏')

class FeedbackReplyForm(FlaskForm):
    reply = TextAreaField("–í—ñ–¥–ø–æ–≤—ñ–¥—å", validators=[DataRequired()])
    submit = SubmitField("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")


class VolunteerForm(FlaskForm):
    help_type = SelectField(
        '–°–ø–æ—Å—ñ–± –¥–æ–ø–æ–º–æ–≥–∏',
        choices=[
            ('–¥–æ–≥–ª—è–¥', '–î–æ–≥–ª—è–¥ –∑–∞ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏'),
            ('—Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è', '–ü–æ—à–∏—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'),
            ('—ñ–Ω—à—ñ', '–Ü–Ω—à–µ')
        ],
        validators=[DataRequired()]
    )
    email = StringField('Email', validators=[Optional(), Email()])
    comment = TextAreaField('–ö–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)', validators=[Optional()])
    submit = SubmitField('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏')

class AnimalForm(FlaskForm):
    name = StringField("–Ü–º‚Äô—è", validators=[DataRequired()])
    species = StringField("–í–∏–¥", validators=[DataRequired()])
    age = IntegerField("–í—ñ–∫", validators=[DataRequired(), NumberRange(min=0)])
    gender = SelectField("–°—Ç–∞—Ç—å", choices=[("male", "–ß"), ("female", "–ñ")], validators=[DataRequired()])
    size = SelectField("–†–æ–∑–º—ñ—Ä", choices=[("small", "–ú–∞–ª–∏–π"), ("medium", "–°–µ—Ä–µ–¥–Ω—ñ–π"), ("large", "–í–µ–ª–∏–∫–∏–π")], validators=[DataRequired()])
    status = SelectField("–°—Ç–∞—Ç—É—Å", choices=[("–≤ –ø—Ä–∏—Ç—É–ª–∫—É", "–≤ –ø—Ä–∏—Ç—É–ª–∫—É"), ("—É—Å–∏–Ω–æ–≤–ª–µ–Ω–æ", "—É—Å–∏–Ω–æ–≤–ª–µ–Ω–æ")], validators=[DataRequired()])
    description = TextAreaField("–û–ø–∏—Å", validators=[Optional()])
    photo = FileField("–§–æ—Ç–æ (jpg/png)", validators=[Optional()])
    submit = SubmitField("–ó–±–µ—Ä–µ–≥—Ç–∏")

class DummyForm(FlaskForm):
    submit = SubmitField('')  # –ø—É—Å—Ç–∏–π submit

class MonthlyReportForm(FlaskForm):
    year = IntegerField('–†—ñ–∫', validators=[DataRequired()])
    month = StringField('–ú—ñ—Å—è—Ü—å', validators=[DataRequired()])
    month_number = IntegerField('–ù–æ–º–µ—Ä –º—ñ—Å—è—Ü—è (1-12)', validators=[DataRequired(), NumberRange(min=1, max=12)])

    income = IntegerField('–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è')
    expenses = IntegerField('–í–∏—Ç—Ä–∞—Ç–∏')
    
    operating_costs = IntegerField('–§—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏—Ç—É–ª–∫—É')
    vet_services = IntegerField('–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ñ –ø–æ—Å–ª—É–≥–∏/–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏')
    garbage = IntegerField('–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è')
    salary = IntegerField('–ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞')
    dry_food = IntegerField('–°—É—Ö–∏–π –∫–æ—Ä–º')
    cat_litter = IntegerField('–ö–æ—Ç—è—á–∏–π –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á')
    grains = IntegerField('–ï–∫—Å—Ç—Ä—É–¥–æ–≤–∞–Ω–∏–π –∫–æ—Ä–º —Ç–∞ –∫—Ä—É–ø–∏')
    construction = IntegerField('–ë—É–¥–º–∞—Ç–µ—Ä—ñ–∞–ª–∏')

    adopted_animals = IntegerField('–£—Å–∏–Ω–æ–≤–ª–µ–Ω–æ —Ç–≤–∞—Ä–∏–Ω')
    new_animals = IntegerField('–ù–æ–≤—ñ —Ç–≤–∞—Ä–∏–Ω–∏')
    submit = SubmitField('–î–æ–¥–∞—Ç–∏ –∑–≤—ñ—Ç')


class AdoptionContractForm(FlaskForm):
    contract = FileField('–î–æ–≥–æ–≤—ñ—Ä (PDF)', validators=[
        FileAllowed(['pdf'], '–î–æ–∑–≤–æ–ª–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ PDF-—Ñ–∞–π–ª–∏'),
        DataRequired()
    ])
    submit = SubmitField('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏')


class AdoptionRequestForm(FlaskForm):
    preferred_slot_id = SelectField(
        "–û–±–µ—Ä—ñ—Ç—å —Å–ª–æ—Ç —ñ–Ω—Ç–µ—Ä–≤‚Äô—é",
        coerce=int,
        validators=[DataRequired()]
    )
    comment = TextAreaField("–ö–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", validators=[Optional()])
    submit = SubmitField("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        from models import InterviewSlot
        self.preferred_slot_id.choices = [
            (slot.id, slot.datetime.strftime("%d.%m.%Y %H:%M"))
            for slot in InterviewSlot.query.filter_by(is_taken=False).order_by(InterviewSlot.datetime).all()
        ]

class AdminAdoptionResponseForm(FlaskForm):
    interview_status = SelectField(
        "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
        choices=[
            ("approved", "‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ"),
            ("rejected", "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        ],
        validators=[DataRequired()]
    )

    reply = TextAreaField("–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", validators=[DataRequired()])
    submit = SubmitField("üí¨ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

class AdoptionRequestFilterForm(FlaskForm):
    user_name = StringField("–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", validators=[Optional()])
    animal_name = StringField("–Ü–º‚Äô—è —Ç–≤–∞—Ä–∏–Ω–∏", validators=[Optional()])
    status = SelectField('–°—Ç–∞—Ç—É—Å', choices=[
    ('', '–£—Å—ñ'),
    ('pending', '–û—á—ñ–∫—É—î'),
    ('approved', '–°—Ö–≤–∞–ª–µ–Ω–æ'),
    ('rejected', '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ')
    ], default='')

    submit = SubmitField("üîç –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏")


class MessageFilterForm(FlaskForm):
    section = SelectField("–§—ñ–ª—å—Ç—Ä", choices=[
        ("all", "–£—Å—ñ"),
        ("adoption", "–ó–∞—è–≤–∫–∏ –Ω–∞ —É—Å–∏–Ω–æ–≤–ª–µ–Ω–Ω—è"),
        ("volunteer", "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ"),
        ("feedback", "–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤‚Äô—è–∑–æ–∫")
    ])
    submit = SubmitField("üîç –ü–æ–∫–∞–∑–∞—Ç–∏")


class InterviewSlotForm(FlaskForm):
    date = DateField("–î–∞—Ç–∞", format="%Y-%m-%d", validators=[DataRequired()])
    time = TimeField("–ß–∞—Å", format="%H:%M", validators=[DataRequired()])
    submit = SubmitField("–î–æ–¥–∞—Ç–∏ —Å–ª–æ—Ç")